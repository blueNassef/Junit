<resources>
    <string name="app_name">nit tutorial</string>
    <string name="benefits_of_using_unit_testing">Benefits of using unit testing:</string>
    <string name="intro_body">1) You know it works now because you\'ve run the test.\n
        2) Unit tests give you instant visual feedback.\n
        3) Test reduces bugs in existing or new features.\n
        4) Tests allow refactoring efficiently.\n
        5) Tests reduce fear.\n
    and finally the famous question:\n
    <b><i>why don\'t we just use Sysout?</i></b>\n
    well, that\'s not testing. this is called LMFAO (looking manually for abnormal outputs).</string>
    <string name="first_junit_title">First of all let\'s create a method  (which will be tested of course.):</string>
    <string name="first_junit_first_method_discussion">Now let\'s discuss what happened here.\n
        This method purpose should take a string and check it\'s first two characters  if any one of them is <b><i>A</i></b>
        it will be truncated from the output result.\n
        <b><i>now lets discuss every line of the method.</i></b>\n
        First line we\'ve created a method named truncate which takes a string(str) as an argument\n
        Line 2. if statement to check the length of the string if it\'s two or less
        then check if one of them is <b><i>A</i></b> replace it then return the result.\n
        Line 5. if the string length is greater than two then we need a place to store the first two characters
        separately to be able to check them.\n
        Line 6. a place to store the rest of the string.\n
        Line 7. the method do it\'s function on checking the presence of <b><i>A</i></b> in the first two places
        if there is <b><i>A</i></b> remove it and then add it to the rest of the string and return it.</string>
    <string name="first_junit_before_testing_statement"><b><i>Now let\'s see how to test this method.</i></b></string>
    <string name="describe_project_structure">As you can see, this is the default project structure
    if you are using (Maven or Ant) build tools, if this is not your scenario then it\'s highly recommended
    to create a separate package for test classes to make sure they are not combined with your project
    when creating jars.</string>
    <string name="creating_test_case">to create a test case. right click on the test package
    and choose new>>junit test. choose class name and click finish.</string>
    <string name="first_test_method">now we have created an empty test case.\n
    lets add our first test method. to create a test method you need to provide (@Test) annotation
    before declaring the method, take a look.</string>
    <string name="first_junit_last_statement">Rule number one. test methods better be <b><i>public</i></b>
    as if you want to retrieve a method in another test package or class and are always void, we don\'t
    except anything to return.\nnow let\'s right click and choose Run file\n<b><i>NOTE</i></b>
    if there is no failing condition then you have a successful case.</string>
    <string name="about">About</string>
    <string name="exit">Exit</string>
    <string name="about_statement">This app aims to provide a clear introduction to unit testing
    using <b><i>Junit</i></b>. through short descriptions and code snippets. at the end of
    every tutorial you will find a link to a video discussion <b><i>(in arabic)</i></b>.
    feel free to leave any feedback and happy coding.</string>
    <string name="creating_first_test_method">let\'s create our first test method.\n
    first of all write down all your test cases in this form <b><i>(expected value, actual value)</i></b>.
    which gives us a scenario like this<b><i>("AACD", "CD")or ("ACD", ""CD) or ("CDEF", "CDEF")or
        ("CDAA", "CDAA")</i></b>.\n<b><i>Remember</i></b> the method only truncates <b><i>A</i></b>
    in the first two positions, thats why we have an expected value like that.\n
    take a look at the code below.\n</string>
    <string name="first_test_case_discussion">Now let\'s discuss the code.\n
    starting from line <b><i>no.6</i></b> we create an instance from the class which will be tested.\n
    line <b><i>no.7</i></b>create a string to hold the actual value.\n
    line <b><i>no.8</i></b> create a string to hold the expected value.\n
    line <b><i>no.9</i></b>we have used the <b><i>assertEquals</i></b> to compare the two values.\n
    now let\'s run the file and you will see we have got a successful test case.\n</string>
    <string name="change_first_test_expected_value"><b><i>Try</i></b> to change
    the expected value to (ACD) to see how the test fails.</string>
    <string name="exercise_first_junit"><b><i><u>Exercise</u></i></b> write test cases for the other
    three scenarios.\n<b><i>GOT STUCK</i></b> don\'t hesitate to use the <b><i>contact us</i></b> button.</string>
    <string name="contact_us">Contact us</string>
    <string name="watch_arabic_video_tutorial">Watch Arabic video tutorial</string>
    <string name="improving_first">let\'s see what we can do to refactor that code a little bit.\n
    <b><i>Firstly</i></b> there is no need to define a string variable and then start to use
    it in the next line, instead we can use our condition directly in the <b><i>assertEquals</i></b>
     constructor.\nTake a look at the code below.\n</string>
    <string name="improving_after_first_refactoring">As you can see we have saved a lot of space
    and the code become more readable, so don\'t forget to always refactor your code, but can we
    do better than this?\nyes. take a look at this situation. if we want to test the four cases
    we stated earlier we would end up with something like this.\n</string>
    <string name="improving_second_attempt">Now what happened from <b><i>line 7</i></b> to
    <b><i>line 10</i></b> ?\nYes that\'s a repeated constructor in the same method and it\'s
    always a bad practice to repeat code. instead we should separate every test condition
    in a separate method with proper naming convention.\nTake a look at this.</string>
    <string name="improving_after_second_attempt">And so on...</string>
    <string name="improving_last_statement">Great, but the class instance is still repeated.\n
    let\'s fix this by making it a global instance and end for now.</string>
    <string name="improving_exercise"><b><i>Exercise</i></b> complete the other two test cases methods
    and change the expected value and see what happens.</string>
    <string name="asserttrue_first_txt">Now let\'s try to test another method.\n
    take a look at the method below.</string>
    <string name="asserttrue_first_disscusion">First let\'s discuss the method.\n
    the method aims to compare the first and last two characters in a string and returns
    true if they are equal, otherwise returns false.\nwe could have a test scenarios like
    (ABCD), (AABDAA), (AB), (A), (AABA).\nNow let\'s create out test cases..</string>
    <string name="asserttrue_after_first_test">If we run that test case it should fail.\n
    because the first two characters are not the same as the last two characters.\n
    let\'s do some refactoring.</string>
    <string name="asserttrue_after_refactoring">Much better, but seems that we\'ve forget
    about code readability, it\'s not a good practice to put a boolean value like
    <b><i>False</i></b> in the assert constructor. instead we should use
    <b><i>assertFalse</i></b> take a look.</string>
    <string name="asserttrue_final_statement">As you can see, we can use
     <b><i>assertFalse</i></b> and <b><i>assertTrue</i></b> to test boolean values.</string>
    <string name="asserttrue_exercise"><b><i>Exercise:</i></b> complete all the test cases.</string>
    <string name="before_after_first">Till now we have used <b><i>
    @Test, assertEquals, assertTrue</i></b> and <b><i>assertFalse</i></b>.\n
    Let\'s see two new annotations and know there usage.</string>
    <string name="before_statement"><b><i>@Before:</i></b> this annotation
    is used to initialise something which will happen before every
    test case.\nMainly it\'s used to start a connection to database or
    a web service,,,etc. take a look at the example below.</string>
    <string name="before_last_before">For naming conventions the
    <b><i>@Before</i></b> method is named <b><i>setup</i></b>.\n
    Now let\'s take a look at <b><i>@After</i></b> annotation.</string>
    <string name="before_last">As you can see <b><i>@After</i></b> is
     the same as <b><i>@Before</i></b> except it happens after every
    test case. and also for naming conventions the <b><i>@After</i></b>
    method is called <b><i>tearDown</i></b>.</string>
    <string name="before_class_after_class_first">The <b><i> @BeforeClass</i></b>
    behaves as the <b><i>@Before</i></b> the only difference is that it
    runs once at the beginning of the class, it\'s ideal usage is when
    we want to establish a database connection only once when we are
    concerned about performance.\n<b><i> Remember:</i></b> the <b><i>
        @BeforeClass</i></b> method must be static.
        \nTake a look at the code below.</string>
    <string name="before_class_after_class_second">I guess you already
    know what does <b><i>@AfterClass</i></b> do.</string>
    <string name="compare_arrays_first">Now we are in a situation in which we want
     to compare two arrays, let\'s take a scenario in which we want
    to sort an array and test it.\nTake a look at the code.</string>
    <string name="comparing_arrays_second">First, let\'s discuss the code.\n
    Line 2. it creates an array of integers called actual and we put
    random values in it.\n
    Line 3. we create an array of integers called expected in which we put
    the values as they were probably sorted.\n
    Line 4. we sort the actual array using <b><i>Arrays.sort</i></b> method.\n
    Finally we use <b><i>assertEquals</i></b> to compare the two arrays</string>
    <string name="compare_arrays_third">IF we Run this file we will see that
     the test case fail. but why?!!\n
    the <b><i>assertEquals</i></b> method compares objects and as you can
     see <b><i>actual</i></b> and <b><i>expected</i></b> are two different
    objects. so instead we will use <b><i>assertArrayEquals</i></b> which
        will only compare the data inside the arrays.\n
    Take a look at the modified code.</string>
    <string name="exceptions_one">Here is a situation in which i know
    my method will cause and exception but i\'m not really interested in it,
    i\'m focusing on something else,\nTake a look at the method below.  </string>
    <string name="exceptions_two">This method will throw <b><i>NullPointerException</i></b>.
    sure, i\'m trying to sort an array which don\'t even exist, but let\'s pretend that
    it\'s not my problem now, i just want to get through this. here comes the
    junit exceptions usage.\nTake a look at the modified method which won\'t through
     any exception.</string>
    <string name="exception_three"><b><i>Remember</i></b> there is a down side
    in junit exception handling. if the test case is waiting for exception which
    didn\'t happen it will fail. in other words if the <b><i>actual</i></b> array has
    values and you\'ve mentioned the <b><i>NullPointerException</i></b> this
    test case will fail.</string>
    <string name="performance_first">Sometimes we don\'t really care about
    the test. we know that the function is working. instead we want to test it\'s
    runtime. let\'s say we have an array which needs to be sorted and you
    don\'t know whether to use <b><i>bubble sort</i></b> or <b><i>selection sort</i></b>.
    which one is best in this situation.\nFirst let\'s generate a random array</string>
    <string name="performance_second">Now let\'s make a method to print
        the generated array in an enhanced way</string>
    <string name="performance_third">Great, let\'s create a method to sort
    the generated array using <b><i>BubbleSort</i></b></string>
    <string name="performance_fourth">Another method for
    <b><i>SelectionSort</i></b>.</string>
    <string name="performance_fifth">To decide which method is better, head to
    our test class and create the test method specifying the
        <b><i>timeout</i></b> parameter </string>
    <string name="performance_six">Now just run the test, if the test passes
    then you know it takes less than one second to generate this array.
    comment line no.3 and un comment line no.4 to see if bubble sort passes
    the test. and so on.</string>
    <string name="performance_last"><b><i>Note</i></b> you won\'t see
    a significant change in performance between the two sorting methods like this.
    instead increase the arraysize to 10000 and you will see that with huge arrays
    which sorting method you should use.</string>
    <string name="para_one">Remember the testTruncate. we\'ve created four
    test cases to test our four scenarios.\nRefresh your memory take a look.</string>
    <string name="para_second">we\'ve created four methods with four
    <b><i>assertEquals</i></b> which are the same. just because we\'ve
    different inputs and outputs. what if we could have put all this data
    in an array and just compare them. with parametrized tests we can. but with
    some rules.</string>
    <string name="para_third"><b><i>Rule no.1:</i></b>
    add the following annotation before class <b><i>@RunWith(Parameterized.class)</i></b>.
    \n<b><i> Rule no.2:</i></b> the method which holds the parameters must be
    static and with <b><i>@Parameters</i></b> annotation.\n
    <b><i>Rule no.3:</i></b> create the constructor to differ between the
    actual and the expected strings.\nTake a look at the full code.</string>
    <string name="suite_first">It\'s always a good practice to test each method
    in a separate test class, but like that you will end up with bunch of
    test class. now what happens if you have been asked for two or three
    test class?. we combine them together using test suites. </string>
    <string name="suite_second">Right click on your test package, choose new,
    other then test suite. give it a name and then finish.\nYou will end up
    with something like this.</string>
    <string name="suite_last">Now if we want to add another test class to
    this suite we just add it in the <b><i>SuiteClass</i></b> comma separated.
    if we run this file it will run both the class together</string>
    <string-array name="tuts">
        <item>Introduction to unit testing</item>
        <item>First junit success</item>
        <item>Improving junit code"</item>
        <item>assertTrue and assertFalse</item>
        <item>Before and After annotations  </item>
        <item>Before class and After class annotations</item>
        <item>Comparing arrays</item>
        <item>Exceptions handling in test class</item>
        <item>Performance test annotation</item>
        <item>Parametrized test annotation</item>
        <item>Test suites</item>
    </string-array>
</resources>
